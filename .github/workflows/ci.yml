name: CI Pipeline

on:
  push:
<<<<<<< HEAD
=======
<<<<<<< HEAD
    branches: [ develop, feature/** ]
  pull_request:
    branches: [ main ]
=======
>>>>>>> feature/ci-pipeline
    branches:
      - develop
      - feature/**
  pull_request:
    branches:
      - main
<<<<<<< HEAD
=======
>>>>>>> 9b0ad7e257c8a7a075c4dab0a3aba57ec30bbcd7
>>>>>>> feature/ci-pipeline

jobs:
  build-and-test:
    runs-on: ubuntu-latest

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> feature/ci-pipeline
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

<<<<<<< HEAD
=======
=======
>>>>>>> 9b0ad7e257c8a7a075c4dab0a3aba57ec30bbcd7
>>>>>>> feature/ci-pipeline
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
<<<<<<< HEAD
          python-version: '3.12' # Ensure this matches your project's Python version
=======
<<<<<<< HEAD
          python-version: '3.12'
=======
          python-version: '3.10'
>>>>>>> feature/ci-pipeline

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
<<<<<<< HEAD
          node-version: '18' # Ensure this matches your project's Node.js version
=======
          node-version: '18'
>>>>>>> 9b0ad7e257c8a7a075c4dab0a3aba57ec30bbcd7
>>>>>>> feature/ci-pipeline

      - name: Install backend dependencies
        run: |
          cd backend
<<<<<<< HEAD
          pip install -r requirements.txt
          # Explicitly install and pin versions of testing frameworks and dependencies
          # to ensure compatibility and resolve the TypeError with TestClient
          pip install pytest==8.4.1
          pip install httpx==0.24.0
          pip install starlette==0.27.0
          pip install fastapi==0.95.0
          # Add any other core backend dependencies here if they are not in requirements.txt
          # For example, uvicorn might be needed to run the app, but not necessarily for tests
          # pip install uvicorn

      - name: Run backend tests
        env:
          # Set PYTHONPATH to allow Python to find the 'app' module
          PYTHONPATH: ${{ github.workspace }}/backend
        run: |
          cd backend # Change into the backend directory before running pytest
          pytest
=======
<<<<<<< HEAD
          python -m venv venv
          source venv/bin/activate
=======
          python -m pip install --upgrade pip
>>>>>>> 9b0ad7e257c8a7a075c4dab0a3aba57ec30bbcd7
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
<<<<<<< HEAD
          source venv/bin/activate
          pytest tests/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
=======
          PYTHONPATH=. pytest
>>>>>>> 9b0ad7e257c8a7a075c4dab0a3aba57ec30bbcd7
>>>>>>> feature/ci-pipeline

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> feature/ci-pipeline
      - name: Run frontend build (to validate)
        run: |
          cd frontend
          npm run build
<<<<<<< HEAD
=======
=======
      - name: Build frontend
        run: |
          cd frontend
          npm run build

>>>>>>> 9b0ad7e257c8a7a075c4dab0a3aba57ec30bbcd7
>>>>>>> feature/ci-pipeline
